!>
................................................................................
.    Copyright (c) 2009-2024 Crater Dog Technologies.  All Rights Reserved.    .
................................................................................
.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.               .
.                                                                              .
.  This code is free software; you can redistribute it and/or modify it under  .
.  the terms of The MIT License (MIT), as published by the Open Source         .
.  Initiative. (See https://opensource.org/license/MIT)                        .
................................................................................
<!

!>
CRATER DOG COLLECTION NOTATION
This document contains a formal definition of the Crater Dog Collection
Notation™ (CDCN) using Crater Dog Syntax Notation™ (CDSN).

For more information on CDSN see the wiki at:
  - https://github.com/craterdog/go-syntax-notation/wiki

┌──────────────────────────────────────────────────────────────────────────────┐
│                               RULE DEFINITIONS                               │
└──────────────────────────────────────────────────────────────────────────────┘
<!
AST: Collection EOL* EOF  ! Terminated with an end-of-file marker.

Collection: Sequence Context

Sequence: "[" Items "]"

Context: "(" type ")"

Items:
    Values
    Associations

Values:
    Value AdditionalValue*
    MultilineValue+ EOL
    " "  ! No values.

AdditionalValue: "," Value

MultilineValue: EOL Value

Value:
    Intrinsic
    Collection

Intrinsic:
    boolean
    complex
    float
    hexadecimal
    integer
    nil
    rune
    string

Associations:
    Association AdditionalAssociation*
    MultilineAssociation+ EOL
    ":"  ! No associations.

AdditionalAssociation: "," Association

MultilineAssociation: EOL Association

Association: Intrinsic ":" Value

!>
┌──────────────────────────────────────────────────────────────────────────────┐
│                            EXPRESSION DEFINITIONS                            │
└──────────────────────────────────────────────────────────────────────────────┘
<!
base10: '0'..'9'

base16: '0'..'9' | 'a'..'f'

boolean: "false" | "true"

complex: "(" float sign float "i)"

delimiter: "[" | "]" | "(" | ")" | ":" | ","

exponent: ('e' | 'E') sign ordinal

float: sign? scalar exponent?

fraction: '.' base10+

hexadecimal: "0x" base16+

integer: zero | sign? ordinal

letter: LOWER | UPPER

nil: "nil"

ordinal: '1'..'9' '0'..'9'*

rune: "'" ~[CONTROL] "'"  ! Any single printable character.

scalar: (zero | ordinal) fraction

sign: '+' | '-'

string: '"' (ESCAPE | ~['"' CONTROL])* '"'

type: "Array" | "Catalog" | "List" | "Map" | "Queue" | "Set" | "Stack"

unicode: 'x' base16{2} | 'u' base16{4} | 'U' base16{8}

zero: '0'

